
// ****************************************************************************************************************** //
// ******* GEDI TW-DTW  -- Esmaeel Adrah
//  ******* Adapted from https://github.com/wouellette/ee-dynamic-time-warping**** //
// ****************************************************************************************************************** //

// ****************************************************************************************************************** //

trainingSamples.aggregate_histogram('Truth').aside(print, "trainingSamples")



validationSamples.aggregate_histogram('Truth').aside(print, "validationSamples")



var properties = [
'VH_All_p3',
'VH_All_p25',
'VH_All_p50',
'VH_All_p75',
'VH_All_p97',
'VV_All_p3',
'VV_All_p25',
'VV_All_p50',
'VV_All_p75',
'VV_All_p97',
 'ndvi_p3',
  'ndvi_p25',
 'ndvi_p75',
 'ndvi_p97',

 'ndvi_median',
   "rh4","rh8", 
    "rh12",  "rh16", 
   "rh24","rh28",
    "rh32", "rh36", 
   "rh44",  "rh48",  "rh52",  "rh56",  "rh64","rh68",  "rh72",  "rh76",
    "rh84",  "rh88",
   "rh92","rh96", 
   "rh10", "rh20", "rh30", "rh40", "rh50", "rh60", "rh70", "rh80", "rh90", "rh100",
           'agbd',  "agbd_pi_lower", "agbd_pi_upper"

]
Data = Data.select(properties)

// ****************************************************************************************************************** //

// Input data parameters

var TIMESERIES_LEN = 5; // Number of timestamps in the time series
var PATTERNS_LEN = 5// Number of timestamps for the reference data points
var CLASS_NO = 3; // Number of classes to map. Those are
var BAND_NO = 9


// DTW time parameters
var BETA = 50; // Beta parameter for the Time-Weighted DTW, controlling the tolerance (in days) of the weighting.
var ALPHA = 0.1; // ALPHA parameter for the Time-Weighted DTW, controlling steepness of the logistic distribution

// ****************************************************************************************************************** //


var Imagelist = ee.List([])

var constructInput = function(band,pp3,pp25,pp50,pp75,pp97,scale){
  
  var im3 = trainingSamples.reduceToImage([band+pp3], ee.Reducer.first().setOutputs([band])).divide(scale)
  var im25 = trainingSamples.reduceToImage([band+pp25], ee.Reducer.first().setOutputs([band+'_25'])).divide(scale)
  var im50 = trainingSamples.reduceToImage([band+pp50], ee.Reducer.first().setOutputs([band+'_50'])).divide(scale)
  var im75 = trainingSamples.reduceToImage([band+pp75], ee.Reducer.first().setOutputs([band+'_75'])).divide(scale)
  var im97 = trainingSamples.reduceToImage([band+pp97], ee.Reducer.first().setOutputs([band+'_97'])).divide(scale)
  var imageBands = im3.addBands(im25).addBands(im50).addBands(im75).addBands(im97)
  
  im3 =  Data.reduceToImage([band+pp3], ee.Reducer.first().setOutputs([band])).divide(scale).set({'doy': 3})
  im25 = Data.reduceToImage([band+pp25], ee.Reducer.first().setOutputs([band])).divide(scale).set({'doy': 25})
  im50 = Data.reduceToImage([band+pp50], ee.Reducer.first().setOutputs([band])).divide(scale).set({'doy': 50})
  im75 = Data.reduceToImage([band+pp75], ee.Reducer.first().setOutputs([band])).divide(scale).set({'doy': 75})
  im97 = Data.reduceToImage([band+pp97], ee.Reducer.first().setOutputs([band])).divide(scale).set({'doy': 97})
  
  return [imageBands, im3,im25,im50,im75,im97]
}


var rh = constructInput('rh',4,8,12,16,20,1000)
var rh2 = constructInput('rh',24,28,32,36,40,1000)
var rh3 = constructInput('rh',44,48,52,56,60,1000)
var rh4 = constructInput('rh',64,68,72,76,80,1000)
var rh5 = constructInput('rh',84,88,92,96,100,1000)
var agbd = constructInput('agbd','_pi_lower','_pi_lower','','_pi_upper','_pi_upper',10000)
var ndvi = constructInput('ndvi','_p3','_p25','_median','_p75','_p97',1)
var VV = constructInput('VV_All','_p3','_p25','_p50','_p75','_p97',1)
var VH = constructInput('VH_All','_p3','_p25','_p50','_p75','_p97',1)



var listIm = function(imN){
var imm = rh[imN].addBands(agbd[imN]).addBands(ndvi[imN]).addBands(VV[imN]).addBands(VH[imN])
.addBands(rh2[imN]).addBands(rh3[imN]).addBands(rh4[imN]).addBands(rh5[imN])
return imm}
Imagelist = Imagelist.add(listIm(1)).add(listIm(2)).add(listIm(3)).add(listIm(4)).add(listIm(5))

var imCol = ee.ImageCollection.fromImages(Imagelist)


var Imagedoy = ee.Image(3).rename('doy').addBands(ee.Image(25).rename('doy_25')).addBands(ee.Image(50).rename('doy_50'))
.addBands(ee.Image(75).rename('doy_75')).addBands(ee.Image(97).rename('doy_97')).clip(Data)

var ImFinal = rh[0].addBands(agbd[0]).addBands(ndvi[0]).addBands(VV[0]).addBands(VH[0])
.addBands(rh2[0]).addBands(rh3[0]).addBands(rh4[0]).addBands(rh5[0])
.addBands(Imagedoy)


var names = ImFinal.bandNames()
names.aside(print)


var ImFinal = ImFinal.select(names)
var ImFinal = ImFinal.reproject({crs:'EPSG:32637', scale: 45})
ImFinal.projection().nominalScale().aside(print)

// ****************************************************************************************************************** //


print(imCol,'imCol')
print(ImFinal,'final')

Map.addLayer(imCol,{},'col')


Map.addLayer(ImFinal,{},'final')





// Import external dependencies
var palettes = require('users/gena/packages:palettes');

// Import the Dynamic Time Warping script
var DTW = require('users/soilwatch/functions:dtw.js');



var reference_signatures = ImFinal
.sampleRegions(  {collection: trainingSamples.map(function(l){return l.centroid()}),
                  properties: ['Truth'],
                  scale : 45,
                  geometries: true});
                   

print(reference_signatures)

// ****************************************************************************************************************** //

var DTWClassification = function(reference_signatures){
  

var dtw_min_dist = function(key, val){
    key = ee.Number.parse(key);
    // Function to format the signatures to a DTW-ready EE array
var training_data_list = DTW.prepareSignatures(reference_signatures,
                                                  'Truth',
                                                  key, //key
                                                  BAND_NO, //BAND_NO
                                                  PATTERNS_LEN, //PATTERNS_LEN
                                                  names);

    // Compute the class-wise DTW distance
    return ee.ImageCollection(DTW.DTWDist(training_data_list,
                                          imCol,
                                          {patterns_no: val,
                                          band_no: BAND_NO,
                                          timeseries_len: TIMESERIES_LEN, //TIMESERIES_LEN
                                          patterns_len: PATTERNS_LEN,  //PATTERNS_LEN
                                          constraint_type: 'time-weighted',
                                          beta: BETA,
                                          alpha: ALPHA
                                          })
          ).min()
          .rename('dtw')
          // Add class band corresponding to the land cover/crop class computed.
          // This is useful/necessary to generate the hard classification map from the dissimilarity values
          .addBands(ee.Image(key).toByte().rename('band'));
  };
  
  
var dtw_image_list = reference_signatures_agg.map(dtw_min_dist);


var array = ee.ImageCollection(dtw_image_list.values()).toArray();

  // Sort array by the first band, keeping other bands
  var axes = {image:0, band:1};
  var sort = array.arraySlice(axes.band, 0, 1);  // select bands from index 0 to 1 (DTW dissimilarity score)
  var sorted = array.arraySort(sort);

  // Take the first image only
  var values = sorted.arraySlice(axes.image, 0, 1);

  // Convert back to an image
  var min = values.arrayProject([axes.band]).arrayFlatten([['dtw', 'band']]);

  // Extract the DTW dissimilarity score
  var dtw_score = min.select(0).rename('score_');
  // Extract the DTW hard classification
  var dtw_class = min.select(1).rename('classification_');

  // 1. DTW outputs (dissimilarity score + classification map), 2. reference signatures, 3. stack of bands used as input to DTW
  return [dtw_class.addBands(dtw_score), reference_signatures];
};

// ****************************************************************************************************************** //


var signatures = trainingSamples.select('Truth')


// Create a dictionary mapping land cover class to number of reference signatures per sample
 
var reference_signatures_agg = signatures.aggregate_histogram('Truth');

print('Number of reference signatures per land cover class:')
print(reference_signatures_agg);

// Class list
var classification_names = ['TreeCrops',
                            'OtherCrops',
                            'WoodyVEg',
                            'bare'
                            ];

// Corresponding color palette for the mapped land cover/crop classes
var classification_palette = ['#d63000',
                              'blue',
                              '#4d8b22',
                              'grey'
                              ];



var score_palette = palettes.colorbrewer.RdYlGn[9].reverse();

var dtw_outputs = DTWClassification(reference_signatures);
var dtw = dtw_outputs[0]; // Extract the DTW dissimilarity score and hard classification


var reference_signatures = dtw_outputs[1]; // Extract the reference signatures for 2020.
var stack = dtw_outputs[2]; // Extract the bands stack used as input for DTW.
var list = ee.List([stack]); // Convert input bands to list to enable appending data from other years

var classif = dtw.select('classification_')


Map.addLayer(classif,{min:1,max:4, palette: classification_palette},'out')


Export.image.toAsset(
  {
  image: classif.clip(Data), description: 'Syria_1_ClassifiedGEDI_DTW_image',
  region: Data,
   assetId:  'projects/ee-hyinhe/assets/Esmaeel/LessIsMore_GEDI_TreeCrops/Outputs/Syria_1_ClassifiedGEDI_DTW_image',
  scale:45, crs: 'EPSG:32637', maxPixels : 1e13})

  
  
  

var validation = classif.sampleRegions({
  collection: validationSamples,
properties: ['Truth'],
  scale: 45
});


var ErrorMatix = validation.errorMatrix('Truth', 'classification_');


print('Error matrix: ', ErrorMatix);


var OverAllAccuracy = ErrorMatix.accuracy();
print('Overall Accuracy: ', OverAllAccuracy);

var fscore = ErrorMatix.fscore();
print('Validation fscore', fscore);


//get the output as a fc to use it as input later
// After exporting the output . RUN HERE TO GET THE OUTPUT AS FC

// var ClassifiedGEDI_DTW_image = classif.clip(Data)
// //ee.Image('projects/ee-hyinhe/assets/Esmaeel/LessIsMore_GEDI_TreeCrops/Outputs/Syria_1_ClassifiedGEDI_DTW_image')


// Map.addLayer(ClassifiedGEDI_DTW_image)
// var ClassifiedGEDI_DTW = ClassifiedGEDI_DTW_image.reduceRegions(
  
// Data.select('WC_ESA'), ee.Reducer.first().setOutputs(['ClassDTW']), 45)

// var ClassifiedGEDI_DTW_fc = ClassifiedGEDI_DTW.select('ClassDTW')

// var ClassifiedGEDI_DTW_fc = ClassifiedGEDI_DTW_fc.filter(ee.Filter.neq('ClassDTW',null))


// Export.table.toAsset(
  
//   ClassifiedGEDI_DTW_fc, 'Syria_1_ClassifiedGEDI_DTW',
//     'projects/ee-hyinhe/assets/Esmaeel/LessIsMore_GEDI_TreeCrops/Outputs/Syria_1_ClassifiedGEDI_DTW')
